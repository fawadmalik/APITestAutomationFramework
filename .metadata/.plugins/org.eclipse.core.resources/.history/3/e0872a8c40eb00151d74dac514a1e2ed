package gov.nasa.api;

import gov.nasa.api.util.APIUtil;
import gov.nasa.api.util.SoundAPIRequest;

import org.apache.http.HttpStatus;
import org.hamcrest.Matchers;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import com.jayway.restassured.RestAssured;
import com.jayway.restassured.http.ContentType;

/**
 * Planetary sounds API test class
 * 
 * @author kvyas
 */
public class SoundsApiTest extends BaseApiTest {
	
	@BeforeClass
	public void setup() {
		RestAssured.baseURI = APIUtil.API_SECURE_DOMAIN ;
		RestAssured.basePath = APIUtil.REST_PATH_PLANET + SoundAPIRequest.RESOURCE_PATH;
	}
	
	@AfterClass
	public void teardown() {
		super.teardown();
		
		// do any test class specific tear down.
	}
	
	/*
	 * There is a defect on server side where it fails to handle invalid limit
	 * input. It ends up returning code 500 (Internal server error) instead of
	 * 400 (bad request). We have to be careful as sometimes leaking stacktraces
	 * can also be a security concern.
	 */
	@Test(dataProvider = "headerTestParams")
	public void testGetDataResponseHeaders(String q, String limit,
			int httpStatusCode) {
		
		System.out.println(RestAssured.baseURI + RestAssured.basePath + APIUtil.buildSoundApiRequest(q,limit));
		RestAssured
				.expect()
				.statusCode(httpStatusCode)
				.contentType(ContentType.JSON)
				.when()
				.get(APIUtil.buildSoundApiRequest(q,limit));
	}

	@Test(dataProvider = "headerTestParams")
	public void testGetDataResponseBody(String q, String limit,
			int httpStatusCode) {
		System.out.println(RestAssured.baseURI + RestAssured.basePath + APIUtil.buildSoundApiRequest(q,limit));

		RestAssured
				.expect()
				.statusCode(httpStatusCode)
				.contentType(ContentType.JSON)
				.when()
				.get(APIUtil.buildSoundApiRequest(q,limit));
	}


}
